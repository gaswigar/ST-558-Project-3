library(textreg)
library(tidyverse)
library(stringr)
library(XML)
library(googleLanguageR)
library(tidyverse)
library(jsonlite)
library(httr)
library(rgoodreads)
library(svMisc)
book_list<-read_csv("./Data/SPGC-metadata-2018-07-18.csv") %>%
filter(!is.na(title),
!is.na(author),
author!='Unknown') %>%
mutate(author_clean=str_replace_all(author,'\\(.+\\)','')) %>%
separate(author_clean,c('Last','First'),',',remove = FALSE) %>%
mutate(author_clean=trimws(ifelse(!is.na(First),
paste(First,Last),
author_clean)))
secret<-'tKQV5hGqO9KKspwslxiKxuce8NN8cTUFf3UqNj8c'
key<-'h2ITz4nhU3JtI6DRrHGw'
goodreads_GET <- function(author,title) {
book_url<-paste0('https://www.goodreads.com/book/title.xml?author=',
str_replace_all(author,' ','+'),
'&key=',
key,
'&title=',
str_replace_all(title,' ','+'))
req <- httr::GET(book_url)
if (httr::http_status(req)$category != "Success"){
return(404)
}
req
}
goodreads_parse_book <- function(req,request_num) {
if(!is.list(req)){
if(req==404){
return(404)
}
}
text <- httr::content(req, as = "text")
if (identical(text, "")) stop("No output to parse", call. = FALSE)
j <- XML::xmlParse(text)
# Remove unwanted stuff for further parsing
sb <- XML::getNodeSet(j, "//similar_books")
XML::removeNodes(sb)
rw <- XML::getNodeSet(j, "//reviews_widget")
XML::removeNodes(rw)
bl <- XML::getNodeSet(j, "//book_links")
XML::removeNodes(bl)
bul <- XML::getNodeSet(j, "//buy_links")
XML::removeNodes(bul)
sw <- XML::getNodeSet(j, "//series_works")
XML::removeNodes(sw)
ps <- XML::getNodeSet(j, "//popular_shelves")
XML::removeNodes(ps)
# Convert to dataframe, add new parameters
d <- XML::xmlToDataFrame(j)
d <- d[!(is.na(d$id)),]
d$work <- NULL
d$authentication <- NULL
d$key <- NULL
d$method <- NULL
rd <- XML::getNodeSet(j, "//rating_dist")
d$rating_dist <- XML::xmlValue(rd[[1]])
an <- XML::xmlSApply(XML::getNodeSet(j, "//authors/author/name"), XML::xmlValue)
ai <- XML::xmlSApply(XML::getNodeSet(j, "//authors/author/id"), XML::xmlValue)
d$authors <- list(paste0(an,":",ai))
# Rename row names as per results
row.names(d)<-1:nrow(d)
d
}
book_by_title_author <- function(author,title) {
tbl <- NULL
ggr <- goodreads_GET(author,title)
tbl <- goodreads_parse_book(ggr)
tbl
}
all<-data.frame()
for(i in 1:(nrow(book_list)/2-.5){
print(i)
new<-book_by_title_author(book_list$author_clean[i],book_list$title[i])
if(!is.list(new)){
if(new==404){
next()
}
}
new<-new %>%
mutate(request_num=i)
all<-bind_rows(all,new)
if(i %/% 100 ==0){
save_checkpoint<-all
}
}
library(sentimentr)
library(textreg)
library(tidyverse)
library(stringr)
library(XML)
library(googleLanguageR)
library(tidyverse)
library(jsonlite)
library(httr)
library(rgoodreads)
library(svMisc)
book_list<-read_csv("./Data/SPGC-metadata-2018-07-18.csv") %>%
filter(!is.na(title),
!is.na(author),
author!='Unknown') %>%
mutate(author_clean=str_replace_all(author,'\\(.+\\)','')) %>%
separate(author_clean,c('Last','First'),',',remove = FALSE) %>%
mutate(author_clean=trimws(ifelse(!is.na(First),
paste(First,Last),
author_clean)))
secret<-'tKQV5hGqO9KKspwslxiKxuce8NN8cTUFf3UqNj8c'
key<-'h2ITz4nhU3JtI6DRrHGw'
goodreads_GET <- function(author,title) {
book_url<-paste0('https://www.goodreads.com/book/title.xml?author=',
str_replace_all(author,' ','+'),
'&key=',
key,
'&title=',
str_replace_all(title,' ','+'))
req <- httr::GET(book_url)
if (httr::http_status(req)$category != "Success"){
return(404)
}
req
}
goodreads_parse_book <- function(req,request_num) {
if(!is.list(req)){
if(req==404){
return(404)
}
}
text <- httr::content(req, as = "text")
if (identical(text, "")) stop("No output to parse", call. = FALSE)
j <- XML::xmlParse(text)
# Remove unwanted stuff for further parsing
sb <- XML::getNodeSet(j, "//similar_books")
XML::removeNodes(sb)
rw <- XML::getNodeSet(j, "//reviews_widget")
XML::removeNodes(rw)
bl <- XML::getNodeSet(j, "//book_links")
XML::removeNodes(bl)
bul <- XML::getNodeSet(j, "//buy_links")
XML::removeNodes(bul)
sw <- XML::getNodeSet(j, "//series_works")
XML::removeNodes(sw)
ps <- XML::getNodeSet(j, "//popular_shelves")
XML::removeNodes(ps)
# Convert to dataframe, add new parameters
d <- XML::xmlToDataFrame(j)
d <- d[!(is.na(d$id)),]
d$work <- NULL
d$authentication <- NULL
d$key <- NULL
d$method <- NULL
rd <- XML::getNodeSet(j, "//rating_dist")
d$rating_dist <- XML::xmlValue(rd[[1]])
an <- XML::xmlSApply(XML::getNodeSet(j, "//authors/author/name"), XML::xmlValue)
ai <- XML::xmlSApply(XML::getNodeSet(j, "//authors/author/id"), XML::xmlValue)
d$authors <- list(paste0(an,":",ai))
# Rename row names as per results
row.names(d)<-1:nrow(d)
d
}
book_by_title_author <- function(author,title) {
tbl <- NULL
ggr <- goodreads_GET(author,title)
tbl <- goodreads_parse_book(ggr)
tbl
}
all<-data.frame()
for(i in 1:(nrow(book_list)/2-.5){
for(i in 1:(nrow(book_list)/2-.5)){
print(i)
new<-book_by_title_author(book_list$author_clean[i],book_list$title[i])
if(!is.list(new)){
if(new==404){
next()
}
}
new<-new %>%
mutate(request_num=i)
all<-bind_rows(all,new)
if(i %/% 100 ==0){
save_checkpoint<-all
}
}
all_backup_1<-all
all_backup_2<-all
View(all_backup_1)
save(all,'C:\Users\gswigart\Documents\NCSU\ST 558\ST-558-Project-3\Data\GoodReadsAPIResults_1.Rdata')
save(all,'C:/Users/gswigart/Documents/NCSU/ST 558/ST-558-Project-3/Data/GoodReadsAPIResults_1.Rdata')
save(all,path='C:/Users/gswigart/Documents/NCSU/ST 558/ST-558-Project-3/Data/GoodReadsAPIResults_1.Rdata')
save(all,file='C:/Users/gswigart/Documents/NCSU/ST 558/ST-558-Project-3/Data/GoodReadsAPIResults_1.Rdata')
save(all,file='C:/Users/gswigart/Documents/NCSU/ST 558/ST-558-Project-3/Data/GoodReadsAPIResults_2.Rdata')
all<-'asdfadsfa'
load(file='C:/Users/gswigart/Documents/NCSU/ST 558/ST-558-Project-3/Data/GoodReadsAPIResults_2.Rdata')
View(all)
goodreads<-load("C:/Users/gswigart/Documents/NCSU/ST 558/ST-558-Project-3/Data/GoodReadsAPIResults_1.Rdata")
View(all)
View(all)
names(goodreads)
goodreads<-load("C:/Users/gswigart/Documents/NCSU/ST 558/ST-558-Project-3/Data/GoodReadsAPIResults_1.Rdata")
goodreads<-all
names(goodreads)
cols.num <- c("average_rating","ratings_count","text_reviews_count","num_pages","publication_year")
goodreads[cols.num] <- sapply(goodreads[cols.num],as.numeric)
cols.num <- c("average_rating","ratings_count","publication_month","publication_day","text_reviews_count","num_pages","publication_year")
goodreads[cols.num] <- sapply(goodreads[cols.num],as.numeric)
goodreads_1<-goodreads %>%
filter(ratings_count>1)
View(goodreads_1)
23/30
23/5
22/5
21/5
21/6
26/6
24/6
25/6
data(goodreads_1,aes(x=rating_count,y=average_rating))+
geom_point()
ggplot(goodreads_1,aes(x=rating_count,y=average_rating))+
geom_point()
ggplot(goodreads_1,aes(x=ratings_count,y=average_rating))+
geom_point()
ggplot(goodreads_1,aes(x=log(rating_count),y=average_rating))+
geom_point()
ggplot(goodreads_1,aes(x=log(ratings_count),y=average_rating))+
geom_point()
ggplot(goodreads_1,aes(x=log(ratings_count),y=average_rating))+
geom_point()+
geom_line()
ggplot(goodreads_1,aes(x=log(ratings_count),y=average_rating))+
geom_point()+
geom_smooth()
glm(average_rating~log(ratings_count),data=goodreads_1)
reg1<-glm(average_rating~log(ratings_count),data=goodreads_1)
summary(reg1)
reg1<-glm(ratings_count~log(average_rating),data=goodreads_1)
summary(ratings_count)
ggplot(goodreads_1,aes(y=log(ratings_count),x=average_rating))+
geom_point()+
geom_smooth()
ggplot(goodreads_1,aes(x=log(ratings_count),y=average_rating))+
geom_point()+
geom_smooth()
book_list<-read_csv("./Data/SPGC-metadata-2018-07-18.csv") %>%
filter(!is.na(title),
!is.na(author),
author!='Unknown') %>%
mutate(author_clean=str_replace_all(author,'\\(.+\\)','')) %>%
separate(author_clean,c('Last','First'),',',remove = FALSE) %>%
mutate(author_clean=trimws(ifelse(!is.na(First),
paste(First,Last),
author_clean)))
book_list_good<-book_list %>%
right_join(goodreads_1)
View(book_list)
book_list<-read_csv("./Data/SPGC-metadata-2018-07-18.csv") %>%
filter(!is.na(title),
!is.na(author),
author!='Unknown') %>%
mutate(author_clean=str_replace_all(author,'\\(.+\\)','')) %>%
separate(author_clean,c('Last','First'),',',remove = FALSE) %>%
mutate(author_clean=trimws(ifelse(!is.na(First),
paste(First,Last),
author_clean)),
request_num=row_number())
load("C:/Users/gswigart/Documents/NCSU/ST 558/ST-558-Project-3/Data/GoodReadsAPIResults_1.Rdata")
goodreads<-all
cols.num <- c("average_rating","ratings_count","publication_month","publication_day","text_reviews_count","num_pages","publication_year")
cols.num <- c("average_rating","ratings_count","publication_month","publication_day","text_reviews_count","num_pages","publication_year")
goodreads[cols.num] <- sapply(goodreads[cols.num],as.numeric)
goodreads_1<-goodreads %>%
filter(ratings_count>1)
book_list_good<-book_list %>%
right_join(goodreads_1,c("request_num"))
View(book_list_good)
ggplot(goodreads_1_good,aes(x=log(ratings_count),y=log(downloads)))+
geom_point()+
geom_smooth()
ggplot(book_list_good,aes(x=log(ratings_count),y=log(downloads)))+
geom_point()+
geom_smooth()
mtcars.pca <- prcomp(ratings_count  %>% select(downloads,ratings_count,average_rating))
mtcars.pca <- prcomp(book_list_good  %>% select(downloads,ratings_count,average_rating))
install_github("vqv/ggbiplot")
library(devtools)
library(devtools)
install_github("vqv/ggbiplot")
ggbiplot(mtcars.pca)
library(ggbiplot)
install_github("vqv/ggbiplot")
library(ggbiplot)
library(ggbiplot)
install_github("vqv/ggbiplot")
autoplot(mtcars.pca, data = book_list_good  %>% select(downloads,ratings_count,average_rating), loadings = TRUE)
mtcars.pca <- prcomp(book_list_good  %>% select(downloads,ratings_count,average_rating),
scale = TRUE)
autoplot(mtcars.pca)
library(ggfortify)
autoplot(mtcars.pca)
autoplot(pca_res, data = book_list_good,)
autoplot(pca_res, data = book_list_good)
autoplot(mtcars.pca, data = book_list_good)
autoplot(mtcars.pca, data = book_list_good,
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3))
autoplot(mtcars.pca, data = book_list_good,
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3)
mtcars.pca <- prcomp(book_list_good  %>% select(downloads,ratings_count,average_rating),
scale = TRUE)
autoplot(mtcars.pca)
autoplot(mtcars.pca)
autoplot(mtcars.pca, data = book_list_good,
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3)
View(book_list)
autoplot(pca, data = book_list_good,
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3)
pca <- prcomp(book_list_good  %>% select(downloads,ratings_count,average_rating),scale = TRUE)
autoplot(pca, data = book_list_good,
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3)
pca$x
book_list_good$PC1<-pca$x$PC1
book_list_good
book_list_good$PC1<-c(pca$x$PC1)
pca$x$PC1
book_list_good$PC1<-c(pca$x$PC1)
book_list_good$PC1<-c(pca$x$[1])
pca$x$[1]
pca$x
pca$x[[1]]
pca$x[1,]
pca$x[,1]
book_list_good$PC1<-pca$x[,1]
book_list_good %>%
arrange(desc(PCA))
top_10<-book_list_good %>%
arrange(desc(PC1)) %>%
top_n(10)
View(top_10)
top_10<-book_list_good %>%
arrange(desc(PC1)) %>%
top_n(30)
top_10<-book_list_good %>%
select(title,PC1)%>%
arrange(desc(PC1)) %>%
top_n(30)
top_10<-book_list_good %>%
select(title.x,PC1)%>%
arrange(desc(PC1)) %>%
top_n(30)
top_10<-book_list_good %>%
select(title.x,PC1)%>%
group_by(title.x) %>%
top_n(1) %>%
arrange(desc(PC1)) %>%
top_n(30)
top_10<-book_list_good %>%
select(title.x,PC1)%>%
group_by(title.x) %>%
top_n(1)
top_10<-book_list_good %>%
select(title.x,PC1)%>%
group_by(title.x) %>%
top_n(1) %>%
arrange(desc(PC1)) %>%
group_by(PC1) %>%
top_n(30)
worst_10<-book_list_good %>%
select(title.x,PC1)%>%
group_by(title.x) %>%
top_n(1) %>%
arrange(PC1) %>%
group_by(PC1) %>%
top_n(30)
View(worst_10)
top_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(1) %>%
arrange(desc(PC1)) %>%
group_by(PC1) %>%
top_n(30)
top_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(title.x,1) %>%
arrange(desc(PC1)) %>%
group_by(PC1) %>%
top_n(PC1,30)
top_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(PC1,1) %>%
arrange(desc(PC1)) %>%
group_by(PC1) %>%
top_n(PC1,30)
top_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(1) %>%
arrange(desc(PC1)) %>%
group_by(PC1) %>%
top_n(30)
top_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(PC1,1) %>%
arrange(desc(PC1)) %>%
group_by(PC1) %>%
top_n(30)
top_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(PC1,1)
top_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(1)
View(top_10)
?top_n
top_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(wt=PC1,n=1)
top_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(wt=PC1,n=1)%>%
arrange(desc(PC1)) %>%
top_n(30)
top_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(wt=PC1,n=1)%>%
arrange(desc(PC1)) %>%
filter(row_number()<30)
top_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(wt=PC1,n=1)%>%
arrange(desc(PC1)) %>%
filter(row_number()<30)
top_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(wt=PC1,n=1)%>%
arrange(desc(PC1)) %>%
head(30)
worst_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(wt=PC1,n=1)%>%
arrange(PC1) %>%
head(30)
top_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(wt=PC1,n=1)%>%
arrange(desc(PC1)) %>%
head(30) %>%
rename(title=title.x) %>%
kable()
library(knitr)
top_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(wt=PC1,n=1)%>%
arrange(desc(PC1)) %>%
head(30) %>%
rename(title=title.x) %>%
kable()
worst_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(wt=PC1,n=1)%>%
arrange(PC1) %>%
head(30) %>%
rename(title=title.x)
top_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(wt=PC1,n=1)%>%
arrange(desc(PC1)) %>%
head(30) %>%
rename(title=title.x) %>%
kable()
top_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(wt=PC1,n=1)%>%
arrange(desc(PC1)) %>%
head(30) %>%
rename(title=title.x) %>%
kable()
worst_10<-book_list_good %>%
select(title.x,PC1,downloads,ratings_count,average_rating)%>%
group_by(title.x) %>%
top_n(wt=PC1,n=1)%>%
arrange(PC1) %>%
head(30) %>%
rename(title=title.x)
savehistory("~/NCSU/ST 558/ST-558-Project-3/History.Rhistory")
